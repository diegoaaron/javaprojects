apuntes capitulo 01
"""""""""""""""""""

java development kit (JDK) tiene el software minimo necesario para desarrollar en java. este incluye:
- javac: convierte los .java en bytecode .class
- java: ejecuta un programa java
- jar: enpaquetador de archivos
- javadoc: generador de documentación

despues de convertir a bytecode la JVM puede ejecutar el codigo en cualquier dispositivo donde este instalado java
el JRE es una versión reducida de JDK que permite ejecutar programas en java pero no compilarlosç

cada 6 meses sale una versión de java. java 17 salio en setiembre del 2021

La clase
""""""""

una clase es una estructura de código que agrupa elementos, para utilizarla se debe crear un objeto que es una instancia en memoria de la clase.

una clase java tiene 2 elementos primarios métodos (funciones, procedimientos) y campos (variables). Ambos son llamados mienbros de la clase. los campos almacenan el estado del programa y los métodos operan sobre ese estado.

public class Animal{

 String name;

 public String getName(){
  return name;
 }

 public void setName(String newName){
  name = newName;
 }
}

Se declaro una variable, 2 metodos, en el primer metodo se devuelve un valor y en el segundo se utiliza "void" para indicar que el metodo no devolvera nada.

los comentarios en java pueden ser de tres tipos:

// comentarios de una linea

/* comentario de
*  multiples lineas
*/

/**
*Javadoc, comentario de documentación
*@author Jeanna and Scoot
*/

el iniciar con /** le dice a la herramiento javadoc del jdk que debe procesarlo ya que es un comentario de documentación de la aplicación.

ver imagen01.jpg

lo normal es definir cada clase java en su propio archivo (la clase es un tipo top-level) pero se pueden definir varias en un mismo archivo.

Una clase top-level es a menudo publica

cuando ponemos 2 clases en un archivo una debe ser definda como top-level y ser definda como publica ademas de el archivo se debe llamar como esta clase, en este caso el archivo se llamara Animal.java

public class Animal{
 private String name;
}

class Animal2{}

Un programa Java inicia con la ejecución del metodo main() ya que este es el punto de entrada para que la JVM trabaje.

public class Zoo{
 public static void main(String[] args){
  System.out.println("Hello World");
 }
}

la palabra "public" es un modificador de acceso y define el nivel de exposicion del metodo

la palabra "static" enlaza directamente el metodo con la clase por lo que no se requiere crear una instancia de la clase para llamarlo

la palabra "void" representa el tipo de retono, se usa void cuando el metodo no va retornar nada.

por ultimo el parametro definido para le metodo puede ser nombrado de cualquier forma pero con solo estos 3 tipos de formatos:

String[] args
String args[]
String... args

String[] perros
String perros[]
String... perros

Podemos pasar argumentos al metodo main y mostrarlos por ejemplo:
public class Zoo{
    public static void main(String[] args){
        System.out.println(args[0]);
        System.out.println(args[1]);
    }
}

al invocar el programa javac Zoo diego

si no pasamos uno de los valores en la ejecucion obtendremos una excepcion

Java agrupa las clases que tiene construida en paquetes

Para utilizar las clases de estos paquetes hay que señalarlos y para eso se utiliza la sentencia "import" que es un instrucción

Los nombres de paquetes son jerarquicos por ende se leen de izquierda a derecha hasta llegar a la clase que se desea utilizar.

existen comodines (wilcards) para facilitar la importación de paquetes

import java.util.*; // importa todas las clases de ese paquete

la importación con comodin solo permite importar clases que estan dentro del paquete, no permite importar sub paquetes, campos o metodos.

la unica clase que nunca es requerido importar es java.lang. ya que java siempre lo hara por defecto.

en un import solo se puede utiliza el comodin wilcard al final de la importación.

si importamos dos paquetes con wilcard y ambos tienen una clase que se llama igual (java.util.Date y java.sql.Date) se producira un error de compilación

import java.util.*;
import java.sql.*;

podemos definir de forma explicita la clase Date que vamos a utilizar para que todo trabaje bien:

import java.util.Date;
import java.sql.*;

si ponemos ambas clases de forma explicita, Java nos dara un error de compilación por ambiguedad.

Por defecto las clases que creamos van a estar en el paquete por defecto del proyecto, asumamos estas 2 clases:

package packagea;
public class ClassA {}

package packageb;
import package.ClassA;

public class ClassB {
public static void main(String[] args){
 ClassA a;
 System.out.println("Got it");
}
}

imagen02 -> la estructura de los paquetes y clases compilados

uno puede definir un directorio diferente para almacenar las clases compiladas

por ejemplo podemos compilar en una carpeta "classes" los archivos anteriores

javac -d classes packagea/ClassA.java packageb/ClassB.java

la ruta de la clase compilada seria "classes/pacageb/ClassB.class"

java -cp classes packageb.ClassB
java -classpath classes packageb.ClassB
java --class-path classes packageb.ClassB

la importancia de estas opciones es que sirven para poder encontrar las clases a ejecutar

si nuestras clases para ejecutarse necesitan paquetes JAR externos podemos agregarlo al class path para que nuestro programa funcione al ejecutarlo.

java -cp ".:/home/files:/tmp/myJar.jar" mypackage/myClass
java -cp ".:/home/files:/tmp/*" mypackage/myClass

podemos crear comprimidos JAR por nuestra cuenta para esto nos ubicamos en el directorio principal de nuestro archivos y ejecutamos el comando:

jar -cvf myNewFile.jar
jar --create--verbose--file myNewFile.jar

podemos indicar un archivo diferente al actual para comprimir

jar -cvf myNewFile.jar -C dir .

dir: es la ruta del directorio que elejimos comprimir
. : el punto significa que el archivo JAR se dejara en la ubivación actual


con la imagen03.jpg podemos ver el orden fijo que debe tener un archivo .java para que compile sin errores en su estructura. un acronimo que nos puede servir es PIC (package, import and class)


Creando OBJETOS:

para crear un objeto el cual es una instancia de una clase debemos de utilizar la palabra "new"

Park p = new Park();

dentro de la clase se debe definir un metodo constructor al cual se le llama igual que la clase y que permite definir cosas para cuando se creen objetos.

public class Chick{
 public Chick(){
  System.out.println("in constructor");
 }
}

tener en cuenta que el método no debe tener configurado VOID o un tipo de dato de retorno, sino se vuelve un método mas y no se considera constructor.

La razón del constructor es inicializar variables, otra forma es definir el valor inicial al declarar la variable en la clase. si no se declara ningun constructor en la clase, Java por defecto declara un constructor vacio.

public class Chicken {
 int numEggs = 12; // inicalizado en la misma linea de la declaración
 String name;
 public Chicken() {
  name = "Dake"; // incializado dessde el constructor.
 }
}

A continuación muestro un ejemplo de como acceder a las variables despues de instanciarlas.

public class Swan{
 int numberEggs;
 public static void main(String[] args) {
  Swan mother = new Swan();
  mother.numberEggs = 1;
  System.out.println(mother.numberEggs);
 }
}

imagen04 -> muestra la solución a bloques de código e instancias de una clase dentro de un segmento de código.

imagen05 -> indica el orden de ejecución del codigo en una clase.

tener en cuenta que no se puede referir "llamar" a una variable que no ha sido inicializada previamente.

Java tiene 2 tipos de datos (data types) primitivos (primitive) y referidos (reference).

Java tiene ocho tipos de datos integrados, denominados tipos primitivos de Java. Estos ocho tipos de datos representan los elementos básicos de los objetos de Java, ya que todos los objetos de Java son simplemente una colección compleja de estos. Dicho esto, un primitivo no es un objeto en Java ni representa un objeto. Un primitivo es simplemente un valor único en la memoria, como un número o un carácter.

imagen06 -> muestro los 8 tipos de datos primitivos con sus detalles

ademas hay que tener en cuenta:

Los tipos byte, short, int y long se utilizan para valores enteros sin puntos decimales.

Cada tipo numérico utiliza el doble de bits que el tipo similar más pequeño. Por ejemplo, short utiliza el doble de bits que byte.

Todos los tipos numéricos tienen signo y reservan uno de sus bits para cubrir un rango negativo. Por ejemplo, en lugar de que byte cubra de 0 a 255 (o incluso de 1 a 256), en realidad cubre de -128 a 127.

Un float requiere la letra f o F después del número para que Java sepa que es un float. Sin una f o F, Java interpreta un valor decimal como un double

Un long requiere la letra l o L después del número para que Java sepa que es un long. Sin una l o L, Java interpreta un número sin punto decimal como un int en la mayoría de los casos.

La principal diferencia entre short y char es que short tiene valores negativos y char solo positivos desde el 0.

Por defecto Java considera los numeros definidos como enteros por ejemplo:
long max = 3213456789; // no compilara ya aunque se defina como long Java lo ve como entero
long max = 3213456789L; // de esta forma Java recien lo considerara un long

Java permite expresar numeros en otros formatos como octal (0 a 7 | 017), hexadecimal (0-9 y a-f | 0xFF) y binario (0-1 | 0B10). el 0x o 0X se pone siempre al inicio de un número hexadecimal y el 0b o 0B se debe poner al inicio de un numero binario.

Java tambien permite utilizar guiones bajos para nombrar numeros grandes.

int million1 = 1_000_000;

Los guiones bajos pueden ir juntos pero no es recomando; algunos ejemplos:

double x1 = _1000.00; // no compila
double x2 = 1000.00_; // no compila
double x3 = 1000_.00; // no compila
double x4 = 1_00_0.0_0; // si compila
double x5 = 1____2; // si compila


Un tipo de referencia hace referencia a un objeto (una instancia de una clase). A diferencia de los tipos primitivos que guardan sus valores en la memoria donde se asigna la variable, la referencia "apunta" a un objeto almacenando la dirección de memoria donde se encuentra el objeto, un concepto al que se hace referencia como puntero. A diferencia de otros lenguajes, Java no permite conocer cuál es la dirección de memoria física. Solo se puede utilizar la referencia para hacer referencia al objeto.

String greeting -> la variable "greeting" solo puede tener una referencia al objeto STring.

Un valor se asigna por referencia de una de dos formas:

- una referencia puede ser asignada a otr objeto del mimos o un tipo compatible.
- una referencia puede ser asignada a un nuevo objeto usando la palabra "new"

por ejemplo en el siguiente codigo:

greeting = new String("hola mundo");

"greeting" es una referencia al nuevo objeto y este objeto solo puede ser accedido via la referencia que es "greeting"

distinciones entre primitivas y tipos referenciados

los primitivos siempre se nombran en minusculas mientras que los tipos referenciados son en mayusculas (esto es una buena practica para definir clases)

los tipos referenciados permiten utilizar metodos que tienne incorporados mientras que los primitivos nunca tendran ningun metodo incluido.

por ultimo mencionar que a los tipo por referencia se le puede asignar NULL (lo que indica que no hay ninguna referencia a algun objeto).

Las clases primitivas tiene sus clases wrapper (envoltura), imagen07

existen dos funcioens que permite convertir cadenas a otros tipos de datos

int primitive = Integer.parseInt("123"); // convierte string en primitivos
Integer wrapper = Integer.valueOf("123"); // convierte string en objetos de las clases envolturas

todas las clases envoltorio heredan de la clase Number por lo cual vienen con métodos que permiten retornar el primitivo del tipo de dato asociado a la clase referida.

Double apple = Double.valueOf("200.99");
System.out.println(apple.byteValue()); // -56 porque hay un desbordamiento del byte y 200 - 256 = -56
System.out.println(apple.intValue()); // 200
System.out.println(apple.doubleValue()); // 200.99

en los boques de código existen los escapes de caracteres como \" y \n el primero escapa el caracterer " para que no se considere una parte del string y la segunda me permite crear un salto de linea.

Java tambien soporta multiple string a través de """

String mibloque = """
  "Java Study Guide"
    by scoot & Jeanne""";


En los bloques de texto existe el "espacio incidental" y el "espacio esencial". El espacio esencial es parte de tu String y es importante para ti. El espacio incidental simplemente está allí para facilitar la lectura del código.

imagen08 -> indica las opciones de salto de linea y espacio para los bloques de cadenas.

String block = """doe"""; // no compilara ya que las primeras tres comillas siempre necesitan un salto de linea.

String block = """
doe\
deer"""; // pone todo el bloque en una sola linea (respeta si hay espacios antes de deer) ya que \ evita el salto de caracteres.

String block = """
doe\n
deer
"""; // aqui hay 4 lines, \n crea una linea vacia ya que es un salto de linea y los """ finales son una linea final en blanco.

DECLARANDO VARIABLES

una variable es un nombre para un espacio de memoria que almacena información.
cuando declaras una variable, necesitas definir el tipo de variable. el darle un valor a la variable se denomina "inicialización"

el identificador es el nombre a variable, metodos, clases, interfaz o paquete. Las reglas para que sean correctos son:
-identificadores deben empezar con una letra, simbolo de moneda (dolar, yuan o euro) y el simbolo guion bajo.
-identificadores pueden incluir numeros pero no iniciar con ellos
-un solo guion abajo no es considerado un identificador
-no se puede utilizar palabras reservadas de java

recordar que java es Case Sensitive por lo que escribir una palabra con mayusculas y minusculas son diferentes.

imagen09 -> lista de palabras reservadas mas comunes que no se pueden utilizar en el identificador.

la palabra "goto" no se utilza en Java pero igual esta reservada para algun futuro

existen otras palabras como null, true, false que tampoco pueden ser utilizadas.

aqui algunos ejemplos permitidos:
- long okidentifier;
- float $OK2Identifier;
- boolean _alsoOK1d3ntifi3r;
- char __SStillOkbutKnotsonice$;

int 3DPointClass; // no puede empezar con un nombre
byte hollywood@; // @ no es una palabra reservada
String *$coffee; // * no es una palabra reservada
double public; // public es una palabra reservada
short _; // un guion bajo no puede ser utilzado

camelCase -> se usa en métodos, variables
CamelCase -> se utiliza para clases e interfaces
snake_case -> se utiliza en constantes y enums

Declaración de multiples variables: uno puede declarar e inicializar todoas las variabels que desee en una misma linea siempre y cuando sean del mismo tipo:

void sandFence(){
 String s1, s2;
 String s3 ="yes", s4 = "no";
} // se declararon 4 variables e inicializaron 2(s3 y s4)


void paintFence(){
 int i1, i2, i3 = 0;
} // aqui se declararon 3 pero solo se inicializo la última

la inicialización de una variable es asignarle un valor y es requerido antes de utilizarlo.

una variable local es una variable definida dentro de un constructor, metodo o bloque de inicialización.

la palabre FINAL se puede aplicar a variables locales y es equivalente a declarar un constante en otros lenguajes.

los array pueden definir uana variable como final y despues agregar valores a las posiciones.

las variables locales no tienen un valor por defecto por lo cual si o si deben ser inicializadas antes de ser utilizadas.

en el siguiente ejemplo el compilador arrojara un error ya que detecta que para un caso no hay un valor que pueda tomar para mostrar en una variable

public void findAnswer(boolean check){
 int answer;
 int otherAnswer;
 int onlyOneBranch;
 if(check){
  onlyOneBranch = 1;
  answer = 1;
 } else {
  answer = 2;
 }
 System.out.println(answer);
 System.out.println(onlyOneBranch); // esto no compilara
}

Las variables pasadas a un constructor o metodo son llamados "parametros del constructor" o "parametros del metodo". Esos parametros son como variables locales y deben ser inicializadas antes de ser utilizadas.

public void checkAnswer(){
 boolean value;
 findAnswer(value); // esto no compila porque "value" no se ha inicializado.
}

Las variables que no son variables locales se definen como variables de instancia o variables de clase.

Una variable de instancia a menudo llamado campo, es un valor definido dentro de una instancia específica de un objeto. asumamos una clase persona con una variable de instancia denominada "nombre" la cual es de tipo cadena. cada instancia de esta clase tendra su propio campo "name" con un valor como "Pedro" o "Luis". dons istancia pueden variar este valor pero no se afectaran entre ellas.

una variable de clase es definda a nivel de la clase por lo cual puede ser utilizada al mismo tiempo por todas las instancias de la clase ademas de no requerir una instancia de la clase para ser utilzada. para definir una variable de clase debemos de anteponer "static" antes del nombre de la variable. Las variables de clase no requieren ser inicializadas, estas pueden utilzar un valor por defecto entregado por Java, este puede ser NULL para objetos, cero para tipos numericos y falso para booleanos.

Uno puede utilizar la palabra "var" en vez de especificar el tipo de dato, solo para declarar variables locales en ciertas condiciones (simplemente escriba var en lugar del tipo primitivo o de referencia)

public class Zoo{
 public void whatTypeAm(){
  var name = "Hello";
  var size = 7;
 }
}

esto no aplica para variables de instancia por ejemplo lo siguiente arroja error:
public class VarKeyword{
 var tricky = "hello"; // no compila
}

la palabra "var" hace que el compilador determine el tipo por ti pero si despues intentas asignar a esa variable un valor de tipo diferente se generara un error de compilación.

public void reassignment(){
 var number = 7;
 number = 4;
 numero = "five"; // se generar un error de compilación
}

al utilizar "var" debemos de definir e inicializar en una linea la variable, podemos hacer un salto de linea como el siguiente:

public void breaking(){
 var silly
  = 1;
}

el siguiente ejemplo arroja error por "question" y "answer"
public void desCompile(boolean check) {
 var question;
 question = 1;
 var answer;
 if(check){
  answer = 2;
 } else {
  answer = 3;
 }
 System.out.println(answer);
}

ahora veamos un ejemplo un poco mas complejo:

public void twoTipes(){
 int a, var b = 3; // no compila porque var detectara el numero como un real y no puede haber valores de diferente tipo en la misma linea.
 var n = null; // esto no compila porque si bien puede referenciarse al tipo Objet, java prefiere este tipo de asignaciones.
}


public int addition(var a , var b){
 return a + b; // esto no compila porque a y b son  parametros y no variables locales.
}

Hay una última regla de la que debes estar al tanto: "var" no es una palabra reservada y está permitido usarla como un identificador. Se considera un nombre de tipo reservado, lo cual significa que no se puede usar para definir un tipo, como una clase, interfaz o enumeración.

Por ejemplo el siguiente codigo compila:

package var;

public class Var{
 public void var(){
  var var = "var";
 }
 public void Var(){
  Var var = new Var();
 }
}

Url de referencia para entender "var": https://openjdk.org/projects/amber/guides/lvti-style-guide

Las variables locales tienen un alcance que se limita como máximo al metodo definido.
cada bloque de codigo separado por {} va tener su propio scope como por ejemplo:

public void eatHi(boolean hungry){
 if(hungry){
  int bitesA = 1;
 }
 System.out.println(bitesA); // no compila porque bitesA solo vive dentro del IF
}

Revisando los alcances:
- variables locales: el alcance es hasta el final del bloque
- parametros de metodos: el alcance es durante la duración del método
- variables de instancia: el alcances es desde la declaración hasta que el objeto es escogido por el recolector de basura.
- variables de clase: el alcance es desde la declaración hasta la finalización del programa.

Todos los objetos de tu programa java son almacenados en la memory heap que es un elemento de la JVM.

El garbage collector es un proceso que automaticamente depura los elemenos que no se necesitan del memory heap. En Java un elemento elegible para el garbage collector son objetos que no estan siendo accedido desde ningun lugar del programa.

Java tiene un metodo interno "System.gc()" el cual puede servir a para uno solicite a Java realizar la ejecución del garbage collector pero este se reserva el derecho a hacerlo.

El garbage collector sensa los objetos hasta detectar que ya no son necesarios para depurarlos bajo 2 condiciones:
- El objeto ya no tiene ninguna referencia que apunte a él.
- Todas las referencias al objeto han quedado fuera de alcance.

la referencia es una variable que tiene un nombre y puede ser utilizada. una referencia puede ser asignada a otra, pasada a un método, ser retornada por un método. todas las referencias tienen el mismo tamaño sin importar el tipo.

Un objeto reside en el heap y no tiene un nombre. Por lo tanto, no hay forma de acceder a un objeto excepto a través de una referencia. Los objetos vienen en todas las formas y tamaños diferentes y consumen cantidades variables de memoria. Un objeto 1  no puede ser asignado a otro objeto, y un objeto no puede ser pasado a un método o devuelto desde un método. Es el objeto el que se recolecta como basura, no su referencia.

imagen10 -> imagen que relaciona la referencia y el objeto

analizando el siguiente codigo para identificar las referencias y objetos:

public class Scope{
 public static void main(String[] args){
  String one, two; // solo definimos 2 nombres
  one = new String("a"); // se crea el primer objeto en el heap y se enlaza a "one"
  two = new String("b"); // se crea el segundo objeto en el heap y se enlaza a "two"
  one = two; // ahora "one" apunta al objeto "b"
  String three = one; // se crea un nuevo nombre y apunta al objeto "b"
  one = null; // por ultimo hacemos que el nombre "one" no apunte a nada
 }
}

con esto concluimos que el objeto "a" sera depurado por el garbage collector y el objeto "b" sera elegible cuando el método concluya.

imagen11 -> referencia al ejemplo de la clase Scope



